# Pass the name of a configuration file as the first argument.  This json
# object contains 'source file', 'script file', 'output folder', and
# 'output file name' keys and values.

# An AppleScript script is built using this information.  Adobe Illustrator is
# run, opening the source file.  Adobe Illustrator is told to load and run the
# script file passed as a config value.  Any output generated by AI is always
# placed in the /output/ subfolder, with '_mod' appended to the original file
# name.  This script then renames the mod file, and moves all files
# from the /output/ subfolder to the
# folder specified as a config value.

require 'json'
require 'FileUtils'
require_relative '../../config/initializers/constants.rb'

# ASCode contains the template Applescript string
ASCode = <<-EOD
    on run
    		tell application "Adobe Illustrator"
    			activate
          set user interaction level to never interact
          open "<<source>>"
          tell process "Finder"
            click button "Ignore" of window "Adobe Illustrator"
          end tell
    			open "<<script>>"
    			try
    				close windows
    			end try
    			close current document
      	end tell
    end run
EOD

def osascript(script)
  system 'osascript', *script.split(/\n/).map { |line| ['-e', line] }.flatten
end


# This method return true if the file specified by 'path' has a base names
# equal to 'base'.  False is returned for files with unrecognized extensions.
def same_base?( path, base )
  return true if File.basename( path, '.ai' ) == base
  return true if File.basename( path, '.jpg' ) == base
  false
end

# This method takes a source path, looks at all files in that source path,
# if a file has a base name equal to source_base, the file is renamed with
# the new_base name, and the same extension.
def rename_mod_files( source_path, source_base, new_base )
  puts 'RUN_AI_SCRIPT - rename_mod_files() - source_path: ' + source_path.to_s
  puts 'RUN_AI_SCRIPT - rename_mod_files() - source_base: ' + source_base.to_s
  puts 'RUN_AI_SCRIPT - rename_mod_files() - new_base: ' + new_base.to_s

  Dir.entries( source_path ).each do |name|
    entry_path = source_path + name

    puts 'RUN_AI_SCRIPT - rename_mod_files() - entry_path: ' + entry_path.to_s

    if same_base?( entry_path, source_base )

      new_path = source_path + '/' + new_base + File.extname( entry_path )
      puts 'RUN_AI_SCRIPT - rename_mod_files() - found a mod file!, new_path: '\
        + new_path.to_s
      FileUtils.mv entry_path, new_path

    end
  end
end

def move_all( dir, dest )
  puts 'RUN_AI_SCRIPT - move_all() - dir: ' + dir
  puts 'RUN_AI_SCRIPT - move_all() - dest: ' + dest

  unless File.directory?(dest)
    puts 'RUN_AI_SCRIPT - move_all - calling mkdir'
    FileUtils.mkdir_p(dest)
  end

  Dir.entries(dir).each do |name|
    puts 'RUN_AI_SCRIPT - name: ' + name

    # skip folders
    next if File.directory? name

    from_path = File.join(dir, name)
    to_path = dest

    puts 'RUN_AI_SCRIPT - move_all - about to MV: ' + from_path.to_s + ' to '\
      + to_path.to_s
    FileUtils.mv from_path, to_path
  end
end

# Load configuration json, get settings

config_file = ARGV[0]

f = File.open(config_file.to_s, 'r')
s = f.read
config_hash = JSON.parse( s )

source_file = config_hash[ RUNNER_CONFIG_KEY_SOURCE_FILE ]
script_file = config_hash[ RUNNER_CONFIG_KEY_SCRIPT_FILE ]
output_folder = config_hash[ RUNNER_CONFIG_KEY_OUTPUT_FOLDER ]
output_file_base_name = config_hash[ RUNNER_CONFIG_KEY_OUTPUT_BASE_NAME ]

source_folder = File.dirname( source_file )
temp_output_folder = source_folder + '/output/'

unless File.directory?( temp_output_folder )
  puts 'RUN_AI_SCRIPT - creating temp output folder.'
  FileUtils.mkdir_p( temp_output_folder )
end

puts 'RUN_AI_SCRIPT - source_file: ' + source_file.to_s
puts 'RUN_AI_SCRIPT - script_file: ' + script_file.to_s
puts 'RUN_AI_SCRIPT - output_folder: ' + output_folder.to_s
puts 'RUN_AI_SCRIPT - source_folder: ' + source_folder.to_s
puts 'RUN_AI_SCRIPT - temp_output_folder: ' + temp_output_folder.to_s
puts 'RUN_AI_SCRIPT - output_file_base_name: ' + output_file_base_name.to_s
puts 'RUN_AI_SCRIPT - output_file_base_name.nil?: ' + output_file_base_name.nil?.to_s

# Search and replace values in ASCode
ASCode.gsub! '<<source>>', source_file
ASCode.gsub! '<<script>>', script_file

# Run the applescript
osascript ASCode

# the source folder is the folder containing the source file
source_folder = File.dirname( source_file )

# AI places all new files in /output/
AI_output_folder = source_folder + '/output/'
AI_output_files = AI_output_folder + '.'

base_name = File.basename( source_file, '.ai' )
mod_file_base_name = base_name + '_mod'

rename_mod_files( AI_output_folder, mod_file_base_name, output_file_base_name ) \
  unless output_file_base_name.nil?

move_all( AI_output_files, output_folder )
