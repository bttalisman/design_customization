#include "~/design_customization/app/assets/javascripts/json2.jsx"function hexToRgb(hex) {  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);  return result ? {      r: parseInt(result[1], 16),      g: parseInt(result[2], 16),      b: parseInt(result[3], 16)  } : null;}function existsInColorsArray( color ){  var bFound = false;  for( var i = 0; i < COLORS.length; i++ )  {    if( (COLORS[i].c == color.c) &&        (COLORS[i].m == color.m) &&        (COLORS[i].y == color.y) &&        (COLORS[i].k == color.k) )    {      bFound = true;      break;    }  }  return bFound;}var COLORS = [];var RGB_DOC;var ORIGINAL_DOC;function writeColorToArray( color ){  c = color.cyan;  m = color.magenta;  y = color.yellow;  k = color.black;  var r = null;  var g = null;  var b = null;  try  {    // translate the cmyk color to rgb    RGB_DOC.defaultStrokeColor = color;    var transColor = RGB_DOC.defaultStrokeColor;    r = transColor.red;    g = transColor.green;    b = transColor.blue;  }  catch( e )  {  }  var o = {};  o.c = c;  o.m = m;  o.y = y;  o.k = k;  o.r = r;  o.g = g;  o.b = b;  if( !existsInColorsArray( o ) ) {    COLORS.push( o ); }}function logColor( color ){  var colorType = color.typename;  if( colorType === 'GradientColor' )  {    // gradient colors are actually a set of colors    var grad = color.gradient;    var stops = grad.gradientStops;    var gradStopsCount = stops.length;    for( var stopIndex = 0; stopIndex < gradStopsCount; stopIndex++ )    {      var stop = stops[ stopIndex ];      var stopColor = stop.color;      writeColorToArray( stopColor );    } // for each stop  } // color is a gradientColor  else  {    // color is not a gradientColor    writeColorToArray( color )  }}if(documents.length > 0){  ORIGINAL_DOC = activeDocument;  // Use this doc to convert cmyk to rgb  RGB_DOC = app.documents.add( DocumentColorSpace.RGB );  var pageItems = ORIGINAL_DOC.pageItems;  var pageItemCount = pageItems.length;  for( var itemIndex = 0; itemIndex < pageItemCount; itemIndex++ )  {    var item = pageItems[ itemIndex ];    try    {      var fillColor = item.fillColor;      if( fillColor ) {        logColor( fillColor ); }    }    catch( e )    {    }    try    {      var strokeColor = item.strokeColor;      if( strokeColor ) {        logColor( strokeColor ); }    }    catch( e )    {    }      } // for each pageItem  var originalFolder = ORIGINAL_DOC.fullName.path;  var fileName = ORIGINAL_DOC.name;  fileName = fileName.slice(0, -3);  fileName = originalFolder + "/output/" + fileName + "_all_colors.jsn";  alert( 'fileName: ' + fileName );  var writeFile = File( fileName );  out = writeFile.open('w', undefined, undefined);  writeFile.encoding = "UTF-8";  writeFile.lineFeed = "Macintosh";  writeFile.writeln( JSON.stringify( COLORS, null, 2 ) );  writeFile.close();  ORIGINAL_DOC.close();  RGB_DOC.close( SaveOptions.DONOTSAVECHANGES )} // if there are documents