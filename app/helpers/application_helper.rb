# Application Helper
require 'net/http'
require 'uri'

module ApplicationHelper
  class BailOutOfProcessing < StandardError
  end


  def do_update_users
    logger.info 'application_helper - do_update_users()'

    users_array = get_shopify_users
    users_array.each { |u|
      logger.info 'application_helper - do_update_users() - looking up user: '\
        + u[ :shopify_id ].to_s

      db_u = nil
      db_u = User.find_by( :shopify_id => u[ :shopify_id ] )

      if db_u.nil?
        logger.info 'application_helper - do_update_users() - CREATING user: '\
          + u[ :shopify_id ].to_s
        User.create( u )
      end
    }
  end


  def get_shopify_users
    logger.info 'application_helper - get_shopify_users()'
    shop_url = 'https://770e59b9b5298644177f12c642038d60:7e5376e9526b536'\
      + '62df6d5aa252ae400@bombsheller-shop.myshopify.com/admin'
    ShopifyAPI::Base.site = shop_url
    limit = 250
    array = []
    count = 0

    customers = ShopifyAPI::Customer.find(:all, :params => {:limit => limit,
                                        :since_id => 0})
    customers.each { |c|
      o = {
        shopify_id: c.id.to_s,
        first_name: c.first_name,
        last_name: c.last_name,
        email: c.email }

      array.push( o )
    }

    while ( customers.length == limit ) do
      since_id = customers.last.id
      customers = ShopifyAPI::Customer.find(:all, :params => {:limit => limit,
                                          :since_id => since_id})
      customers.each { |c|
        o = {
          shopify_id: c.id.to_s,
          first_name: c.first_name,
          last_name: c.last_name,
          email: c.email }

        array.push( o )
      }
    end

    ShopifyAPI::Base.site = nil
    logger.info 'application_helper - get_shopify_users() - array: ' + array.to_s
    array
  end


  def local_host
    request.protocol + request.host + ':' + request.port.to_s
  end

  def remote_host
    app_config = Rails.application.config_for( :customization )
    host = app_config[ 'remote_server_uri' ]
    logger.info 'application_helper - remote_host() - host: ' + host.to_s
    host
  end

  def json?( s )
    # double bang forces a boolean context for whatever parse returns, without
    # changing it's boolean value
    !!JSON.parse(s)
  rescue
    false
  end

  def to_boolean( str )
    return false if str.nil?
    str.downcase == 'true'
  end

  def is_number? string
    true if Float(string) rescue false
  end

  def is_integer? string
    true if Integer(string) rescue false
  end

  def guarantee_final_slash( folder_path )
    Rails.logger.info( 'application_helper - guarantee_final_slash() - '\
      + 'folder_path' + folder_path.to_s )
    f = folder_path
    f = folder_path + '/' if folder_path[-1, 1] != '/'
    f
  end

  # All necessary data are written to the folder containing the original AI
  # file
  def path_to_data_file( path_to_ai_file )
    source_folder = File.dirname( path_to_ai_file )
    base_name = File.basename( path_to_ai_file, '.ai' )
    data_file = source_folder + '/' + base_name + '_data.jsn'
    data_file
  end

  # All prompts data are written to the folder containing the original AI
  # file.  This is used for post_process method
  def path_to_prompts_file( path_to_ai_file )
    source_folder = File.dirname( path_to_ai_file )
    base_name = File.basename( path_to_ai_file, '.ai' )
    data_file = source_folder + '/' + base_name + '_prompts.jsn'
    data_file
  end


  def bool_display_text( b )
    t = if b.to_s == 'true'
          'yes'
        else
          'no'
        end
    t
  end

  def make_suitable_file_name( s )
    s = s.downcase
    s = s.gsub(/\s+/, '_')
    s = s.gsub( /-/, '_' )
    s
  end


  def time_display_text( datetime )
    return '' if datetime.nil?
    time = datetime.in_time_zone( 'Pacific Time (US & Canada)' )
    time.strftime( '%-m/%-d/%y: %H:%M %Z' )
  end

  def load_array_file( path )
    exists = File.exist?( path )
    a_string = ''
    a = [] # default value
    if exists
      File.open( path, 'r' ) do |f|
        a_string = f.read
      end
      a = JSON.parse( a_string ) if json?( a_string )
    end
    a
  end

  def get_ai_fonts()
    # This file can be generated by running bin/illustrator_processing/getFonts.jsx
    fonts = load_array_file( Rails.root.to_s + '/config/ai_fonts.json' )
#    Rails.logger.info 'application_helper - get_ai_fonts() - fonts: '\
#      + JSON.pretty_generate( fonts )
    fonts
  end
end
