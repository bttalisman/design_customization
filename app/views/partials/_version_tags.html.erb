<!-- This partial generates the html prompting the user for specifics on how tags
should be dealt with for a version.  This file must coordinate with the _design_template_tags partial.
For example, the design template tags partial asks, can the user set the color on this tag? and the version
tags partial says, ok, color can be set for this tag, what color should it be? -->

<%
i = 0
@tag_settings.each { |tag|

  # these properties are stored with the template, they tell us how to ask
  # for specifics from the user creating a version.
  tag_name = tag[ 0 ]

  prompt = tag[ 1 ][ PROMPTS_KEY_PROMPT ]
  max_length = tag[ 1 ][ PROMPTS_KEY_MAX_L ]
  min_length = tag[ 1 ][ PROMPTS_KEY_MIN_L ]
  pick_color = tag[ 1 ][ PROMPTS_KEY_PICK_COLOR ]
  text_color = ''

  if( !max_length )
    max_length = ''
  end
  if( !min_length )
    min_length = ''
  end

  if @tag_values
    val = @tag_values[ tag_name ]

    if !val.nil?
      # these properties are the users' previously set answers to the questions asked
      # when creating a version
      replacement_text = val[ VERSION_VALUES_KEY_REPLACEMENT_TEXT ]
      text_color = val[ VERSION_VALUES_KEY_TEXT_COLOR ]
    end
  end

  logger.info '_VERSION_TAGS.html.erb - tag_name: ' + tag_name.to_s
  logger.info '_VERSION_TAGS.html.erb - pick_color: ' + pick_color.to_s
  logger.info '_VERSION_TAGS.html.erb - text_color: ' + text_color.to_s
  logger.info '_VERSION_TAGS.html.erb - max_length: ' + max_length.to_s
  logger.info '_VERSION_TAGS.html.erb - min_length: ' + min_length.to_s

  if (max_length != '') || (min_length != '')
    if( max_length == '' )
      title = '(Please enter at least ' + min_length + ' characters.)'
    elsif( min_length == '' )
      title = '(Please enter at most ' + max_length + ' characters.)'
    else
      title = '(Please enter between ' + min_length.to_s + ' and ' + max_length.to_s + ' characters.)'
    end
  else
    title = ''
  end

  logger.info '_VERSION_TAGS.html.erb - title: ' + title.to_s

%>

  <div class="panel panel-info">
    <div class="panel-heading"><h3 class='panel-title'>Enter Your Text</h3></div>
    <div class="panel-body" style='height:210;'> <!-- todo - why must i set the height? -->

      <input type='hidden' name='tag_name<%= i.to_s %>' value='<%= tag_name %>'></input>
      <input type='text' class='form-control' placeholder='<%= prompt %>' required value='<%= replacement_text %>' name='replacement_text<%= i.to_s %>' id='replacement_text<%= i.to_s %>' data-maxl='<%= max_length %>' data-minl='<%= min_length %>' data-tag-name='<%= tag_name %>' >
      </input>
      <%= title %>

      <div class='spacer'></div>

<%    if pick_color != '' %>
        <div id='colorpicker_container<%= i.to_s %>' style='display:inline-block;'>
          <div class='input-group' style='float:left; width:90%;'>
            <span class="input-group-addon" id="basic-addon1">Text Color</span>
            <select name="color_val<%= i.to_s %>" id="color_val<%= i.to_s %>" style='width:98%;' aria-describedby="basic-addon1" class="form-control">
              <option disabled selected='selected'>Pick a Color</option>
<%=           @palettes[ tag_name ].each do |c| %>
                <option title='<%= c.description %>' value='<%= c.hex_code %>' <%= if( c.hex_code == text_color ) then 'selected' end %> ><%= c.hex_code %></option>
<%            end %>
            </select>
          </div>
          <div id='swatch<%= i.to_s %>' style='display:inline-block; float:left; height:27px; width:27px; background:<%= text_color %>'></div>
        </div>
<%    end # pick a color %>

  </div> <!-- panel-body -->
</div> <!-- panel -->

<%
  i += 1
} # each tag

%>

<input type='hidden' id='tag_count' name='tag_count' value='<%= i.to_s %>'></input>

<script>

  $(document).ready(function() {
    $("[id^='color_val']").select2({
      templateResult: formatColor
    });

    $("[id^='colorpicker_container']").each( bindSwatch );
  });

  function bindSwatch( ) {
    $(this).find( 'select' ).change( { swatch:$(this).find( "[id^='swatch']" ) }, changeTextColor );
  }

  function formatColor (color) {
    if (!color.id) { return color.text; }
    var $color = $(
      '<span><div style="display:inline-block; height:20px; width:20px; background:' + color.element.value + '"></div><div style="height:20px; margin-left:5px; display:inline-block; vertical-align:top;">' + color.text + '</div></span>'
    );
    return $color;
  }


  function changeTextColor( event )
  {
    var swatch = event.data.swatch;
    var select = event.target;
    var val = select.value;
    swatch.css( 'background', val );
  }


  function validate_tag_values()
  {
    var count = $('#tag_count').val();
    var s, v, o;
    var rep_text;
    var text_color;
    var minl, maxl;
    var len;
    var oReturn;
    var oTagProps;
    oReturn = {};

    for( var i = 0; i < count; i++ )
    {
      s = '#replacement_text' + i;
      o = $(s);
      rep_text = o.val();
      tag_name = o.attr( 'data-tag-name' );

      if( rep_text === '' )
      {
        alert( 'Please enter replacement text.' );
        return false;
      }

      minl = parseInt( o.attr( 'data-minl' ) );
      maxl = parseInt( o.attr( 'data-maxl' ) );
      len = rep_text.length;

      if( !isNaN( minl) )
      {
        // there is a minl
        if( len < minl )
        {
          alert( 'This text is too short!' );
          return false;
        }
      }

      if( !isNaN( maxl ) )
      {
        // there is a maxl
        if( len > maxl )
        {
          alert( 'This text is too long!' );
          return false;
        }
      }

      s = '#color_val' + i;
      o = $(s);
      text_color = o.val();
      if( text_color === null )
      {
        alert( 'Please pick a color.' );
        return false;
      }

    }

    return true;
  }


</script>
