

<%
i = 0
@tag_settings.each { |tag|

  # these properties are stored with the template, they tell us how to ask
  # for specifics from the user creating a version.
  tag_name = tag[ 0 ]

  prompt = tag[ 1 ]['prompt']
  max_length = tag[ 1 ]['max_length']
  min_length = tag[ 1 ]['min_length']
  pick_color = tag[ 1 ]['pick_color']
  text_color = '#0000ff'

  if( !max_length ) then
    max_length = ''
  end
  if( !min_length ) then
    min_length = ''
  end


  if( @tag_values ) then
    val = @tag_values[ tag_name ]

    if( val != nil ) then

      # these properties are the users' previously set answers to the questions asked
      # when creating a version
      replacement_text = val['replacement_text']
      text_color = val['text_color']
    end

  end

  logger.info '_VERSION_TAGS.html.erb - tag_name: ' + tag_name.to_s
  logger.info '_VERSION_TAGS.html.erb - pick_color: ' + pick_color.to_s
  logger.info '_VERSION_TAGS.html.erb - text_color: ' + text_color.to_s
  logger.info '_VERSION_TAGS.html.erb - max_length: ' + max_length.to_s
  logger.info '_VERSION_TAGS.html.erb - min_length: ' + min_length.to_s

  if( (max_length != '') || (min_length != '') ) then
    if( max_length == '' ) then
      title = '(Please enter at least ' + min_length + ' characters.)'
    elsif( min_length == '' ) then
      title = '(Please enter at most ' + max_length + ' characters.)'
    else
      title = '(Please enter between ' + min_length.to_s + ' and ' + max_length.to_s + ' characters.)'
    end
  else
    title = ''
  end

  logger.info '_VERSION_TAGS.html.erb - pattern: ' + title.to_s

%>


  <div class="panel panel-info">
    <div class="panel-heading"><h3 class='panel-title'>Enter Your Text</h3></div>
    <div class="panel-body" style='height:210;'> <!-- todo - why must i set the height? -->

      <input type='text' class='form-control' placeholder='<%= prompt %>' required value='<%= replacement_text %>' id='replacement_text<%= i.to_s %>' data-maxl='<%= max_length %>' data-minl='<%= min_length %>' data-tag-name='<%= tag_name %>' >
      </input>
      <%= title %>

      <div class='spacer'></div>

<%    if( pick_color != '' ) then %>
        <div id='colorpicker_container<%= i.to_s %>' style='display:inline-block;'>
          <div class='input-group' style='float:left; width:90%;'>
            <span class="input-group-addon" id="basic-addon1">Pick a Color</span>
            <select id="color_val<%= i.to_s %>" style='width:98%;' aria-describedby="basic-addon1" class="form-control">
<%=             @colors.each do |c| %>
                  <option value='<%= c.hex_code %>' <%= if( c.hex_code == text_color ) then 'selected' end %> ><%= c.hex_code %></option>
<%              end %>
            </select>
          </div>
          <div id='swatch<%= i.to_s %>' style='display:inline-block; float:left; height:27px; width:27px; background:<%= text_color %>'></div>
        </div>
<%    end # pick a color %>


  </div> <!-- panel-body -->
</div> <!-- panel -->

<%
  i += 1
} # each tag

%>

<input type='hidden' id='tag_count' value='<%= i.to_s %>'></input>

<script>

  $(document).ready(function() {
    $("[id^='color_val']").select2({
      templateResult: formatColor
    });

    $("[id^='colorpicker_container']").each( bindSwatch );
  });

  function bindSwatch( ) {
    $(this).find( 'select' ).change( { swatch:$(this).find( "[id^='swatch']" ) }, changeTextColor );
  }

  function formatColor (color) {
    if (!color.id) { return color.text; }
    var $color = $(
      '<span><div style="display:inline-block; height:20px; width:20px; background:' + color.element.value + '"></div>' + color.text + '</span>'
    );
    return $color;
  };


  function changeTextColor( event )
  {
    var swatch = event.data.swatch;
    var select = event.target;
    var val = select.value;
    swatch.css( 'background', val );
  }


  function validate_tag_values()
  {
    var count = $('#tag_count').val();
    var s, v, o;
    var rep_text;
    var text_color;
    var minl, maxl;
    var len;
    var oReturn;
    var oTagProps;
    oReturn = {};

    var bValid = true;

    for( var i = 0; i < count; i++ )
    {
      s = '#replacement_text' + i;
      o = $(s);
      rep_text = o.val();
      tag_name = o.attr( 'data-tag-name' );

      minl = parseInt( o.attr( 'data-minl' ) );
      maxl = parseInt( o.attr( 'data-maxl' ) );

      len = rep_text.length;


      if( ( len < minl ) || ( len > maxl ) )
      {
        bValid = false;
      }

      s = '#color_val' + i;
      o = $(s);
      text_color = o.val();

    }

    return bValid;
  }


  // called from versions/edit.html.erb, and version/new.html.erb
  function build_tag_values()
  {
    var count = $('#tag_count').val();
    var s, v, o;
    var rep_text;
    var text_color;

    var oReturn;
    var oTagProps;
    oReturn = {};

    var tag_name;

    for( var i = 0; i < count; i++ )
    {
          s = '#replacement_text' + i;
          o = $(s);
          rep_text = o.val();
          tag_name = o.attr( 'data-tag-name' );

          s = '#color_val' + i;
          o = $(s);
          text_color = o.val();

          oTagProps = {};
          oTagProps[ 'replacement_text' ] = rep_text;
          oTagProps[ 'text_color' ] = text_color;


          oReturn[ tag_name ] = oTagProps;
    }

    return oReturn;
  }

</script>
